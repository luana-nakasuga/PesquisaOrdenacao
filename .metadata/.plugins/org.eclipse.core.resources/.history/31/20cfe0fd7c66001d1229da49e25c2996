package algoritmosOrdenacao;

import io.InOut;

public class Principal {
	public static void main(String[] args) {
		BubbleSort bubble = new BubbleSort();
		InsertionSort insert = new InsertionSort();
		MergeSort merge = new MergeSort();
		QuickSort quick = new QuickSort();
		SelectionSort selection = new SelectionSort();
		ShellSort shell = new ShellSort();
	}

	public static int tamanho() {
		String menuTamanho = "1 - 100\n2 - 1000\n3 - 10000\n4 - 100000\n5 - 1000000\n6 - Sair.";
		int opcao = 0;

		do {
			opcao = InOut.leInt(menuTamanho);

			switch (opcao) {
			case 1:
				tam100();
				break;
			case 2:
				tam1000();
				break;
			case 3:
				tam10000();
				break;
			case 4:
				tam100000();
				break;
			case 5:
				tam1000000();
				break;
			case 6:
				break;
			default:
				InOut.msgDeErro("AVISO", "Opção inválida.");
				break;
			}
		} while (opcao != 6);
		return opcao;

	}

	private static void tam100() {
		
	}

	private static void tam1000() {

	}

	private static void tam10000() {

	}

	private static void tam100000() {

	}

	private static void tam1000000() {

	}

	public static void ordem(int[] vetor) {

		String menuOrdem = "1 - Ordem aleatória.\n2 - Ordem crescente.\n3 - Ordem decrescente.\n4 - Sair.";
		int opcao = 0;

		do {
			opcao = InOut.leInt(menuOrdem);

			switch (opcao) {
			case 1:
				int[] aleatorio = null;
				for (int i = 0; i <= 1000000; i++) {
					if (i <= 100) {
						aleatorio[i] = (int) (1 + (Math.random() * 100));
					}
					if (i <= 1000) {
						aleatorio[i] = (int) (1 + (Math.random() * 1000));
					}
					if (i <= 10000) {
						aleatorio[i] = (int) (1 + (Math.random() * 10000));
					}
					if (i <= 100000) {
						aleatorio[i] = (int) (1 +  (Math.random() * 100000));
					}
					if (i <= 1000000) {
						aleatorio[i] = (int) (1 + (Math.random() * 1000000));
					}
				}
				break;
			case 2:
				int crescente[] = null;
				for (int i = 0; i <= 1000000; i++) {
					if (i < 100) {
						crescente[i] = i;
					}
					if (i < 1000) {
						crescente[i] = i;
					}
					if (i < 10000) {
						crescente[i] = i;
					}
					if (i < 100000) {
						crescente[i] = i;
					}
					if (i < 1000000) {
						crescente[i] = i;
					}
				}
				break;
			case 3:
				int aux3 = 1000001;
				int decrescente[] = null;
				for (int i = 0; i <= 1000000; i++) {
					if (i < 100) {
						decrescente[i] = aux3 - 1;
					}
					if (i < 1000) {
						decrescente[i] = aux3 - 1;
					}
					if (i < 10000) {
						decrescente[i] = aux3 - 1;
					}
					if (i < 100000) {
						decrescente[i] = aux3 - 1;
					}
					if (i < 1000000) {
						decrescente[i] = aux3 - 1;
					}
					aux3--;
				}
				break;
			case 4:
				break;
			default:
				InOut.msgDeErro("AVISO", "Opção inválida.");
				break;
			}
		} while (opcao != 4);
	}
}